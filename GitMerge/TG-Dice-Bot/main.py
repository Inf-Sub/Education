class GameManager:
    '''
    In order for the bot to see Dice in the Telegram group in the @BotFather settings, 
    you need to change /setprivace to disabled.

    This class is designed to manage chats and cubes in them.
    For each chat, we create a separate object, initialize the round, and add players 
    until the round is completed.
    If there are several winners, then we announce the next round, in which only the 
    winners of the previous round play. Until only one remains.

    –ù–∞–π—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ:
    https://ru.stackoverflow.com/questions/759476/%D0%BD%D0%B0%D0%B9%D1%82%D0%B8-%D0%BC%D0%B0%D0%BA%D1%81%D0%B8%D0%BC%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5-%D0%B7%D0%BD%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D0%B5-%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8F-python
    '''

    """ def __init__(self, chat_id: int) -> None:
        if not chat_id is None:
            self.chat_id = chat_id
        else:
            print(f"Error: Incorrect telegram Chat ID")
            return
        
        self.gamers = self._set_gamers()
        self.round = self._set_game_round() """


    def __init__(self, config: dict) -> None:
        self.debug = True

        if self.debug:
            print(f"{'=' * 30}\n–ò–Ω–∏–∞—Ü–∏–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∫–ª–∞—Å—Å–∞: GameManager\n")
        
        import time

        self._status = {}
        self._botmsg = self._set_bot_messages()
        
        self._botnick = '@' + TelegramBotAPI(config['api_url'], config['api_key']).get_me()
        if self.debug:
                    print(f"{'=' * 30}\nTelegram Bot NickName:\n{self._botnick}\n")

        #i = 0
        #while i < 100:
        while True:
            #i += 1
            tg_data = TelegramBotAPI(
                config['api_url'],
                config['api_key']
            )

            time.sleep(1)

            if len(tg_data.data) == 0:
                continue
            else:                
                # Write log to File.
                import json
                with open('TG-MSG.log', 'a') as outfile:
                    json.dump(tg_data.data, outfile, indent=5)

                if self.debug:
                    print(f"{'=' * 30}\nLenght: {len(tg_data.data)}\n")

            for new_msg in tg_data.data:
                if self.debug:
                    print(f"{'=' * 30}\nTelegram New Message:\n{new_msg}\n")

                if new_msg.get('message'):

                    tg_chat_id = new_msg['message']['chat']['id']
                    tg_user_id = new_msg['message']['from']['id']
                    tg_msg_id = new_msg['message']['message_id']
                    #tg_username = new_msg['message']['from']['username']
                else:
                    if self.debug:
                        print(f"{'=' * 30}\n=== Continue===\n\n")
                    continue


                


                # Game round number
                if tg_chat_id not in self._status:
                    #self._status[tg_chat_id] = {'users': {}, 'round': 1}
                    self._status[tg_chat_id] = []

                # Game round number
                round = len(self._status[tg_chat_id])
                round_id = round - 1

                if self.debug:
                    print(f"{'=' * 30}\nGame round number: {round}\n")
                
                if new_msg['message'].get('dice'):
                    if self.debug:
                        print(f"{'=' * 30}\n" \
                            #f"Telegram New Message:\n{new_msg}\n" \
                            #f"Type Telegram New Message: {type(new_msg)}\n" \
                            #f"Update ID: {new_msg['update_id']} Type: {type(new_msg['update_id'])}\n"
                            f"Dice Value: {new_msg['message']['dice']['value']}\n"
                        )

                    # if game not run
                    if round == 0:
                        tg_data.send_message({
                            'chat_id': tg_chat_id, 
                            'reply_to_message_id': tg_msg_id,
                            'text': self._botmsg['game_not_run'],
                            'parse_mode': 'html'
                            })
                    else:
                        if tg_user_id not in self._status[tg_chat_id][round_id]:
                            self._status[tg_chat_id][round_id][tg_user_id] = {
                                'username': new_msg['message']['from']['username'],
                                'value': new_msg['message']['dice']['value']
                            }
                        else:                        
                            if self.debug:
                                print(f"{'=' * 30}\n" \
                                    f"{self._botmsg['you_have_already_rolled']}" % \
                                    (self._status[tg_chat_id][round_id][tg_user_id]['value'])
                                    )
                            
                            tg_data.send_message({
                                'chat_id': tg_chat_id, 
                                'reply_to_message_id': tg_msg_id,
                                'text': self._botmsg['you_have_already_rolled'] %  
                                    (self._status[tg_chat_id][round_id][tg_user_id]['value']),
                                'parse_mode': 'html'
                                })


                if new_msg['message'].get('text'):
                    if self.debug:
                        print(f"{'=' * 30}\n" \
                            #f"Telegram New Message:\n{new_msg}\n" \
                            #f"Type Telegram New Message: {type(new_msg)}\n" \
                            #f"Update ID: {new_msg['update_id']} Type: {type(new_msg['update_id'])}\n"
                            f"Message Text: {new_msg['message']['text']}\n"
                    )

                    # delete bot name from text
                    tg_msg_text = new_msg['message']['text'].replace(self._botnick, '')    
                    
                    # send message
                    if self._botmsg.get(tg_msg_text):
                        tg_data.send_message({
                            'chat_id': tg_chat_id, 
                            'reply_to_message_id': tg_msg_id,
                            'text': self._botmsg[tg_msg_text],
                            'parse_mode': 'html',
                            })

                    # TODO: added check admin rights!!!
                    if not round and tg_msg_text == '/begin':
                        # Create Chat_ID list in status
                        #if tg_chat_id not in self._status:
                            #self._status[tg_chat_id] = {'users': {}, 'round': 1}
                        self._status[tg_chat_id] = [{}]

                    allow_message = ['/next_force', '/confirm']                    
                    if round > 0 and tg_msg_text in allow_message:
                        if self.debug:
                            print(f"{'=' * 30}\n" \
                                f"{tg_msg_text}:\n" \
                                f"round: {round}\n" \
                                f"round_id: {round_id}\n" \
                                f"tg_chat_id: {tg_chat_id}\n" \
                                f"Status: {self._status}\n" \
                                f"Lenght: {len(self._status[tg_chat_id][round_id])}\n" \
                            )

                        # if the number of players participating in the round is more than one
                        if len(self._status[tg_chat_id][round_id]) > 1:
                            self._status[tg_chat_id].append({})
                        else:
                            tg_data.send_message({
                            'chat_id': tg_chat_id, 
                            'reply_to_message_id': tg_msg_id,
                            'text': self._botmsg['must_be_more_one'],
                            'parse_mode': 'html',
                            })

                        



                    

            else:
                tg_data.get_updates({'offset': new_msg['update_id'] + 1})



                
            if self.debug:
                print(f"{'=' * 30}\nSTATUS: {self._status}\n")

        #tg_bot_dice.get_updates()
        
        #self._chat_id = self._data[0]['message']['chat']['id']
        #print(f"{'=' * 30}\nTelegram Chat ID: {self._chat_id}")
        
    def _set_bot_messages(self) -> list:
        msg_list = {}

        msg_list['/info'] = f"<b><u>Dice Bot</u></b> version: 0.3.10 alpha\n" \
                            f"\n" \
                            f"<i>Shit Coding by @InfSub</i>\n" 

        msg_list['/help'] = f"<b><u>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</u></b>\n" \
                            f"\n" \
                            f"<b><u>–ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞</u></b>\n" \
                            f"–ß—Ç–æ –±—ã –∫–∏–Ω—É—Ç—å –∫—É–±–∏–∫, –Ω–∞–∂–º–∏ –Ω–∞ —á—É–∂–æ–π –∏ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</b>.\n" \
                            f"–ï—Å–ª–∏ —á—É–∂–∏—Ö –∫—É–±–∏–∫–æ–≤ –Ω–µ—Ç, —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏ üé≤ –∏ –¢–µ–ª–µ–≥—Ä–∞–º —Å–¥–µ–ª–∞–µ—Ç –∏–∑ —ç—Ç–æ–≥–æ –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞.\n" \
                            f"–ß—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å üé≤, –Ω–∞–ø–∏—à–∏ <b>:–∫—É–±–∏–∫</b> (<i><b>:dice</b> –µ—Å–ª–∏ —è–∑—ã–∫ –¢–µ–ª–µ–≥—Ä–∞–º–∞ - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π</i>).\n" \
                            f"–ù–∞ –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –¢–µ–ª–µ–≥—Ä–∞–º–∞ –∫—É–±–∏–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç.\n" \
                            f"\n" \
                            f"<b><u>–•–æ–¥ –∏–≥—Ä—ã</u></b>\n" \
                            f"–ü–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ - –∫—Ç–æ —É–≥–æ–¥–Ω–æ –º–æ–∂–µ—Ç –∫–∏–Ω—É—Ç—å –∫—É–±–∏–∫.\n" \
                            f"–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞—É–Ω–¥ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–ª–∏ —Å–∞–º –±–æ—Ç.\n" \
                            f"–í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞ —Ç–µ –∏–≥—Ä–æ–∫–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤, –ø–æ–ø–∞–¥–∞—é—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥.\n" \
                            f"–í–æ –≤—Ç–æ—Ä–æ–º –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞—É–Ω–¥–∞—Ö –º–æ–≥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞.\n" \
                            f"–° 1:00 –ú–°–ö –ø–æ 7:00 –ú–°–ö –±–æ—Ç —Å–ø–∏—Ç –∏ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –∏ –∫—É–±–∏–∫–∏.\n" \
                            f"\n" \
                            f"<b><u>–ö–æ–º–∞–Ω–¥—ã</u></b>\n" \
                            f"<s>–¢–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç—Ä–∏ –∫–æ–º–∞–Ω–¥—ã:</s>\n" \
                            f"/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ.\n" \
                            f"/help - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —ç—Ç–æ –æ–±—É—á–µ–Ω–∏–µ, —Ç—ã –µ—ë —É–∂–µ, –≤–∏–¥–∏–º–æ, –∑–Ω–∞–µ—à—å.\n" \
                            f"/stats - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Ä–∞—É–Ω–¥–∞, —Ç–∞–º –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ —É—á–∞—Å—Ç–≤—É–µ—Ç –∏ –∫—Ç–æ —Å–∫–æ–ª—å–∫–æ –≤—ã–∫–∏–Ω—É–ª.\n" \
                            f"\n" \
                            f"<b><u>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤</u></b>\n" \
                            f"<s>–≠—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã, –ø—Ä–æ—Å—Ç–∏ —É–∂.</s>\n" \
                            f"/begin - –ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É. –ë–æ—Ç –Ω–µ –¥–∞—Å—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É, –µ—Å–ª–∏ —Å—Ç–∞—Ä–∞—è –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞.\n" \
                            f"/next - –ù–∞—á–∏–Ω–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥, –µ—Å–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Ç–µ–∫—É—â–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –∏–≥—Ä—É, " \
                            f"–µ—Å–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω.\n" \
                            f"/next_force - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞—É–Ω–¥ (–±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è).\n" \
                            f"<s>/revoke - –û—Ç–ø—Ä–∞–≤—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫—É–±–∏–∫ –∏–≥—Ä–æ–∫–∞ —á—Ç–æ –±—ã –æ–±–Ω—É–ª–∏—Ç—å –µ–≥–æ —Å—á—ë—Ç –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—É–Ω–¥–µ.</s>\n" \
                            f"\n" \
                            f"\n" \
                            f"–ò —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ: –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∫–∏–¥–∞—Ç—å —Ä–µ–ø—É –ñ–∞–Ω–Ω–µ. üòâ"
        
        msg_list['/stats'] = f"<b><u>üü¢ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞, —Ä–∞—É–Ω–¥ %s\n" \
                            f"\n" \
                            f"%s\n" 
        
        msg_list['/begin'] = f"<b>‚ùóÔ∏è –ö–∏–¥–∞–µ–º –∫—É–±–∏–∫ üé≤</b>\n" \
                             f"<b>‚ùóÔ∏è –ü–æ–±–µ–¥–∏—Ç–µ–ª—é –ø—Ä–∏–∑ üéâ</b>\n" \
                            f"\n" \
                            f"–ß—Ç–æ–±—ã –∫–∏–Ω—É—Ç—å –∫—É–±–∏–∫, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∏ –∑–∞—Ç–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É \"<b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</b>\".\n" 
        
        # –∞ –Ω—É–∂–µ–Ω –ª–∏ —Ç—É—Ç /cancel ?
        msg_list['/next'] = f"<b>–¢—ã —É–≤–µ—Ä–µ–Ω(–∞), —á—Ç–æ —Ö–æ—á–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥?</b>\n" \
                            f"\n" \
                            f"/confirm - –î–∞, —É–≤–µ—Ä–µ–Ω(–∞).\n" \
                            #f"/cancel - –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞.\n" 

                            
        msg_list['next_round'] = f"<b>üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ üéâ %s —Ä–∞—É–Ω–¥–∞ —Å–æ —Å—á—ë—Ç–æ–º %s:</b>\n" \
                            f"%s\n" \
                            f"\n" \
                            f"<b>‚ùóÔ∏è –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞—É–Ω–¥ %s ‚ùóÔ∏è</b>\n" \
                            f"–ö–∏–¥–∞–π—Ç–µ –∫—É–±–∏–∫–∏, —Ç–æ–≤–∞—Ä–∏—â–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏!\n"

        msg_list['next_round_quote'] = f"<i>–ñ–∏–∑–Ω—å –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–∞—à–∏—Ö –≤–¥–æ—Ö–æ–≤, –∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–æ–º–µ–Ω—Ç–æ–≤, " \
                            f"–æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –¥—ã—Ö–∞–Ω–∏–µ.</i>\n" \
                            f"<i>‚Äî –ú–∞–π—è –≠–Ω–¥–∂–µ–ª–æ—É</i>"

        msg_list['game_not_run'] = f"<b>–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç</b>\n" 

        msg_list['you_are_not_in_this_round'] = f"<b>–¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ. –ü–æ–¥–æ–∂–¥–∏ –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã.</b>\n" 

        msg_list['you_have_already_rolled'] = f"<b>–¢—ã —É–∂–µ –∫–∏–¥–∞–ª –∫—É–±–∏–∫ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ –∏ –≤—ã–ø–∞–ª–æ %s.</b>\n" 

        msg_list['must_be_more_one'] = f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ.</b>\n" 

        msg_list['/reload'] = f"<b>I'll be back...</b>\n"
        
        msg_list['/restart'] = f"<b>I'll be back...</b>\n"
        
        msg_list['/exit'] = f"<b>You killed me!!!</b>\n"



        return msg_list
                    

    def _get_command(self, msg):
        pass

    def _get_dice(self, msg):
        pass

    def _set_gamers(self, user_id: int) -> None:
        pass

    def _set_game_round(self, game_round_number: int = 1) -> int:
        return game_round_number + 1

    def _get_chat_id(self) -> int:
        pass



class ConfigReader:
    '''
    This class returns the program settings from the .config and .env files necessary for operation
    Russian: –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –∫–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω —á–∏—Ç–∞—Ç—å .config –∏ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç —Ç—É–¥–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ .env 
    —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø—É—Ç—å –¥–æ .env –ø—É—Å—Ç, —á–∏—Ç–∞—Ç—å .env –∏–∑ –∫–æ—Ä–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    –∫–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –º–µ—Ç–æ–¥ get_config(path='') –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–≤–æ–π—Å—Ç–≤ (–µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω .env 
    –≤—ã–¥–∞—Ç—å –æ—à–∏–±–∫—É / –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–∫–∞–∑–∞–Ω–∏–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è .env) –µ—Å–ª–∏ —Å–≤–æ–π—Å—Ç–≤ –Ω–µ—Ç - –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã 
    get_config() –∏ get_env() –∏–Ω–∞—á–µ –æ—Ç–¥–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
    '''

    def __init__(self, config_files: tuple = ('.env', '.config')) -> None:
        '''
        The class constructor calls the _get_config_file() method to populate the class properties
        from the configuration files.
        '''
        self.debug = False
        if self.debug:
            print(f"{'=' * 30}\n–ò–Ω–∏–∞—Ü–∏–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∫–ª–∞—Å—Å–∞: ConfigReader\n")
        
        self.api = {}

        if config_files != ():
            for config_file in config_files:
                self._get_config_file_path(config_file)
        else:
            if self.debug:
                print(f"{'=' * 30}\nconfig_files is empty\n")
            # add Error message
            return


    def _get_config_file_path(self, config_file: str) -> None:
        '''
        This method checks for the presence of a file in the current project directory and passes
        it to the _get_config_file() method to get the class parameters
        :param config_file:
        :return:
        '''
        import os
        # for compatibility with jupyter notebook (name '__file__' is not defined)
        try:
            config_file_path = os.path.join(os.path.dirname(__file__), config_file)
        except:
            # dotenv_path = os.path.join(os.path.dirname(os.path.abspath('')),config_file)
            config_file_path = os.path.join(os.path.abspath(''), config_file)

        if os.path.exists(config_file_path):
            self._get_config_file(config_file_path)
        else:
            # –í—ã–≤–µ—Å—Ç–∏ –≤ –≤–∏–¥–µ –æ—à–∏–±–∫–∏!
            if self.debug:
                print(f"{'=' * 30}\nFile: {config_file_path} is not found!\n")

    def _get_config_file(self, config_file: str = '') -> None:
        """
        This method reads private values from .env file and values from .config file.
        For install "dotenv" in "Python" use command:

        pip3 install python-dotenv
        For install "dotenv" in "Anaconda" use command:

        conda install -c conda-forge python-dotenv

        :param config_file: full path to config file
        :return: None
        """
        import os
        from dotenv import load_dotenv

        # load config file
        load_dotenv(config_file)
        if self.debug:
            print(f"{'=' * 30}\nLoad config file: {config_file}\n")

        # TODO: create a tuple or list, or dist of parameters and loop through them, checking and substituting
        #  an empty value if there is no parameter

        if os.getenv('api_key') is not None:
            self.api['api_key'] = os.getenv('api_key')
        if os.getenv('api_url') is not None:
            self.api['api_url'] = os.getenv('api_url')



class TelegramBotAPI:
    '''
    This class is for getting data from API
    '''

    def __init__(self, api_url: str, api_key: str) -> list:
        '''
        –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        :param config: object with parameters for API
        :return:
        '''
        self.debug = False

        if self.debug:
            print(f"{'=' * 30}\n–ò–Ω–∏–∞—Ü–∏–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∫–ª–∞—Å—Å–∞: TelegramBotAPI\n")
        # import fake_useragent as fua
        # import math

        if api_url and api_key:
            self._tg_api_url = api_url + api_key
        #    self._api_url = api_url
        #    self._api_key = api_key
        else:
            if self.debug:
                print(f"{'=' * 30}\nError API data:\napi_url: {api_url}\napi_key: {api_key}\n")

            return

        if self.debug:
            print(f"{'=' * 30}\n–ü–æ–ª—É—á–µ–Ω URL API with API Key:\ntg_api_url: {self._tg_api_url}\n")

        self._headers = {
        #    'User-Agent': user_agent,
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'ContentType': 'application/json; charset=utf-8'
        }

        self.data = self.get_updates()
        
        if self.debug:
            print(f"{'=' * 30}\nTelegram API Data: {type(self.data)}\n{self.data}\n")

        #self._chat_id = self._data[0]['message']['chat']['id']
        #print(f"{'=' * 30}\nTelegram Chat ID: {self._chat_id}")




        # fake useragent
        #fake_ua = fua.UserAgent()
        #try:
        #    user_agent = fake_ua.random
        #except:
        #    user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36'
        

    def get_me(self) -> str:
        ### imports ###
        import requests as req

        request_result = req.get(self._tg_api_url+'/getMe', headers=self._headers)

        if self.debug:
            print(
                f"{'=' * 30}\n" \
                f"getMe:\n" \
                f"Status code:   {request_result.status_code}\n" \
                f"Encoding:      {request_result.encoding}\n" \
                f"Headers:       {request_result.headers}\n" \
                f"Text:          {request_result.text}\n" \
            )

        if request_result.status_code != 200:
            print(f"{'=' * 30}\n" \
                f"\Error:\n"
                f"getMe: request status code == {request_result.status_code}\n"
                f"Text: {request_result.text}\n")
            return

        api_data = request_result.json()
        if self.debug:
            print(f"{'=' * 30}\ngetUpdates: API Data:\n{api_data}\n")

        # for test getChatAdministrators
        #request_result = req.get(self._tg_api_url+'/getChatAdministrators', headers=self._headers, params={'chat_id': -862538827})
        #print(f"request_result: {request_result.json()}")

        # –≤—ã–π—Ç–∏ –∏–∑ —Ç–µ–∫—É—â–µ–π –∏–Ω—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ? return)
        if api_data['result'] is None:
            return
        else:
            if self.debug:
                print(f"{'=' * 30}\ngetUpdates: Result Type: {type(api_data['result'])}\n")
            
            return api_data['result']['username']


    def get_updates(self, params: list = {}) -> list:
        ### imports ###
        import requests as req

        request_result = req.get(self._tg_api_url+'/getUpdates', headers=self._headers, params=params)
  
        if self.debug:
            print(
                f"{'=' * 30}\n" \
                f"getUpdates:\n" \
                f"Status code:   {request_result.status_code}\n" \
                f"Encoding:      {request_result.encoding}\n" \
                f"Headers:       {request_result.headers}\n" \
                f"Text:          {request_result.text}\n" \
            )

        if request_result.status_code != 200:
            print(f"{'=' * 30}\n" \
                f"\Error:\n"
                f"getUpdates: request status code == {request_result.status_code}\n"
                f"Text: {request_result.text}\n")
            return

        api_data = request_result.json()
        if self.debug:
            print(f"{'=' * 30}\ngetUpdates: API Data:\n{api_data}\n")

        # for test getChatAdministrators
        #request_result = req.get(self._tg_api_url+'/getChatAdministrators', headers=self._headers, params={'chat_id': -862538827})
        #print(f"request_result: {request_result.json()}")

        # –≤—ã–π—Ç–∏ –∏–∑ —Ç–µ–∫—É—â–µ–π –∏–Ω—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ? return)
        if api_data['result'] is None:
            return
        else:
            if self.debug:
                print(f"{'=' * 30}\ngetUpdates: Result Type: {type(api_data['result'])}\n")
            
            return api_data['result']

        # incorrectly
        #if self._chat_id is None:
        #    self._chat_id = api_data['result']['message']['chat']['id']

    def send_message(self, data: list) -> None:
        self.debug = True
        ### imports ###
        import requests as req

        if not data.get('parse_mode'):
            data['parse_mode'] = 'html'

        request_result = req.post(self._tg_api_url+'/sendMessage', headers=self._headers, json=data)
   

        if self.debug:
            print(
                f"{'=' * 30}\n" \
                f"sendMessage:\n" \
                f"Status code:   {request_result.status_code}\n" \
                f"Encoding:      {request_result.encoding}\n" \
                f"Headers:       {request_result.headers}\n" \
                f"Text:          {request_result.text}\n" \
            )

        if request_result.status_code != 200:
            print(f"{'=' * 30}\n" \
                f"\Error:\n"
                f"sendMessage: request status code == {request_result.status_code}\n"
                f"Text: {request_result.text}\n")
            return


        self.debug = False



def main():
    debug = False

    if debug:
        print(f"{'=' * 30}\n–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫: {__name__}\n")
    
    current_config = ConfigReader()
    if debug:
        print(f"{'=' * 30}\n–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞:\nAPI: {current_config.api}\nType: {type(current_config.api)}")
    
    GameManager(current_config.api)
    


    #chat_id = tg_bot_dice.get_updates()
    #locals()['tg_chat' + chat_id]


#tg_chat_id = 1590508723 // chat_id legion
if __name__ == "__main__":
    main()
